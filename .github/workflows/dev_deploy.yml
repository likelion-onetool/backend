name: Docker 테스트 서버 CI/CD

# 이벤트: 실행되는 시점을 정의합니다
on:
  push:
    branches:
      - dev

jobs:
  My-Deploy-Job:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 실행
    steps:
      - name: 코드 체크아웃  # GitHub 리포지토리의 소스 코드를 가져옵니다
        uses: actions/checkout@v3  # GitHub의 공식 액션 사용
        with:
          submodules: recursive  # 서브모듈 포함 체크아웃
          token: ${{ secrets.PAT_TOKEN }}  # Private Access Token 사용

      - name: Docker Buildx 설치 및 설정  # Buildx 설치 및 Docker 컨테이너 드라이버 사용 설정
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          driver: docker-container  # docker-container 드라이버 설정
          buildkitd-flags: --debug  # 추가 플래그 (옵션)

      - name: Gradle 의존성 캐시 복원
        uses: actions/cache/restore@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: JDK 17 설치  # JDK 17을 설치하여 Java 환경을 설정합니다
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Temurin 배포판 사용

      - name: Spring 프로젝트 빌드  # Spring 프로젝트를 빌드합니다
        run: |
          cd ./server/
          chmod +x ./gradlew  # gradlew 파일에 실행 권한 부여
          ./gradlew clean build -x test  # 테스트 제외하고 빌드 실행

      - name: Docker 이미지 생성 및 DockerHub에 푸시  # Docker 이미지를 빌드하고 DockerHub에 푸시합니다
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}  # DockerHub 로그인
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --push \
            -t ${{ secrets.DOCKER_REPO }}/onetool-test-server:v1 .  # Docker Buildx 사용

      - name: EC2에서 이미지 pull 후 컨테이너 실행  # EC2 서버에서 Docker 이미지 pull 후 컨테이너 실행
        uses: appleboy/ssh-action@master  # EC2 서버에 SSH 접속 후 명령 실행
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스 호스트 정보
          username: ${{ secrets.EC2_SSH_USER }}  # SSH 접속 사용자 이름
          key: ${{ secrets.PRIVATE_KEY }}  # SSH 프라이빗 키
          script: |  # EC2에서 실행할 스크립트
            docker stop $(docker ps -q) && docker rm $(docker ps -qa)
            docker pull ${{ secrets.DOCKER_REPO }}/onetool-test-server:v1
            docker-compose -f compose.yml up -d
            docker image prune --force
